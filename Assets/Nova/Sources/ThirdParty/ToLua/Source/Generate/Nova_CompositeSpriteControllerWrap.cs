// This source code was auto-generated by ToLua#, do not modify it
using System;
using LuaInterface;

public class Nova_CompositeSpriteControllerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Nova.CompositeSpriteController), typeof(Nova.FadeController));
		L.RegFunction("SetPose", SetPose);
		L.RegFunction("ClearImage", ClearImage);
		L.RegFunction("ArrayToPose", ArrayToPose);
		L.RegFunction("PoseToArray", PoseToArray);
		L.RegFunction("LoadSprites", LoadSprites);
		L.RegFunction("Preload", Preload);
		L.RegFunction("Unpreload", Unpreload);
		L.RegFunction("GetRestoreData", GetRestoreData);
		L.RegFunction("Restore", Restore);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("mergerPrimary", get_mergerPrimary, set_mergerPrimary);
		L.RegVar("mergerSub", get_mergerSub, set_mergerSub);
		L.RegVar("imageFolder", get_imageFolder, set_imageFolder);
		L.RegVar("luaGlobalName", get_luaGlobalName, set_luaGlobalName);
		L.RegVar("renderToCamera", get_renderToCamera, null);
		L.RegVar("renderTexture", get_renderTexture, null);
		L.RegVar("layer", get_layer, set_layer);
		L.RegVar("restorableName", get_restorableName, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPose(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)ToLua.CheckObject<Nova.CompositeSpriteController>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.SetPose(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)ToLua.CheckObject<Nova.CompositeSpriteController>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.SetPose(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nova.CompositeSpriteController.SetPose");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearImage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)ToLua.CheckObject<Nova.CompositeSpriteController>(L, 1);
				obj.ClearImage();
				return 0;
			}
			else if (count == 2)
			{
				Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)ToLua.CheckObject<Nova.CompositeSpriteController>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.ClearImage(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nova.CompositeSpriteController.ClearImage");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ArrayToPose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Collections.Generic.IEnumerable<string> arg0 = (System.Collections.Generic.IEnumerable<string>)ToLua.CheckObject<System.Collections.Generic.IEnumerable<string>>(L, 1);
			string o = Nova.CompositeSpriteController.ArrayToPose(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PoseToArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			System.Collections.Generic.IEnumerable<string> o = Nova.CompositeSpriteController.PoseToArray(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSprites(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			System.Collections.Generic.IReadOnlyList<Nova.SpriteWithOffset> o = Nova.CompositeSpriteController.LoadSprites(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Preload(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)ToLua.CheckObject<Nova.CompositeSpriteController>(L, 1);
			Nova.AssetCacheType arg0 = (Nova.AssetCacheType)ToLua.CheckObject(L, 2, typeof(Nova.AssetCacheType));
			string arg1 = ToLua.CheckString(L, 3);
			obj.Preload(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Unpreload(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)ToLua.CheckObject<Nova.CompositeSpriteController>(L, 1);
			Nova.AssetCacheType arg0 = (Nova.AssetCacheType)ToLua.CheckObject(L, 2, typeof(Nova.AssetCacheType));
			string arg1 = ToLua.CheckString(L, 3);
			obj.Unpreload(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRestoreData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)ToLua.CheckObject<Nova.CompositeSpriteController>(L, 1);
			Nova.IRestoreData o = obj.GetRestoreData();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Restore(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)ToLua.CheckObject<Nova.CompositeSpriteController>(L, 1);
			Nova.IRestoreData arg0 = (Nova.IRestoreData)ToLua.CheckObject<Nova.IRestoreData>(L, 2);
			obj.Restore(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mergerPrimary(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)o;
			Nova.CompositeSpriteMerger ret = obj.mergerPrimary;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mergerPrimary on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mergerSub(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)o;
			Nova.CompositeSpriteMerger ret = obj.mergerSub;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mergerSub on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_imageFolder(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)o;
			string ret = obj.imageFolder;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index imageFolder on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_luaGlobalName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)o;
			string ret = obj.luaGlobalName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index luaGlobalName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_renderToCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)o;
			bool ret = obj.renderToCamera;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index renderToCamera on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_renderTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)o;
			UnityEngine.RenderTexture ret = obj.renderTexture;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index renderTexture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_layer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)o;
			int ret = obj.layer;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index layer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_restorableName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)o;
			string ret = obj.restorableName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index restorableName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mergerPrimary(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)o;
			Nova.CompositeSpriteMerger arg0 = (Nova.CompositeSpriteMerger)ToLua.CheckObject<Nova.CompositeSpriteMerger>(L, 2);
			obj.mergerPrimary = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mergerPrimary on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mergerSub(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)o;
			Nova.CompositeSpriteMerger arg0 = (Nova.CompositeSpriteMerger)ToLua.CheckObject<Nova.CompositeSpriteMerger>(L, 2);
			obj.mergerSub = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mergerSub on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_imageFolder(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.imageFolder = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index imageFolder on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_luaGlobalName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.luaGlobalName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index luaGlobalName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_layer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteController obj = (Nova.CompositeSpriteController)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.layer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index layer on a nil value");
		}
	}
}

