// This source code was auto-generated by ToLua#, do not modify it
using System;
using LuaInterface;

public class Nova_PostProcessingWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Nova.PostProcessing), typeof(Nova.URP.OnPostRenderBehaviour));
		L.RegFunction("SetLayer", SetLayer);
		L.RegFunction("ClearLayer", ClearLayer);
		L.RegFunction("Blit", Blit);
		L.RegFunction("ExecuteOnRenderImageFeature", ExecuteOnRenderImageFeature);
		L.RegFunction("GetRestoreData", GetRestoreData);
		L.RegFunction("Restore", Restore);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("luaName", get_luaName, set_luaName);
		L.RegVar("TempBlitID", get_TempBlitID, null);
		L.RegVar("restorableName", get_restorableName, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Nova.PostProcessing obj = (Nova.PostProcessing)ToLua.CheckObject<Nova.PostProcessing>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Material arg1 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 3);
			int o = obj.SetLayer(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearLayer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Nova.PostProcessing obj = (Nova.PostProcessing)ToLua.CheckObject<Nova.PostProcessing>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				obj.ClearLayer(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Nova.PostProcessing obj = (Nova.PostProcessing)ToLua.CheckObject<Nova.PostProcessing>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.ClearLayer(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nova.PostProcessing.ClearLayer");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Blit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Nova.PostProcessing obj = (Nova.PostProcessing)ToLua.CheckObject<Nova.PostProcessing>(L, 1);
			UnityEngine.Rendering.CommandBuffer arg0 = (UnityEngine.Rendering.CommandBuffer)ToLua.CheckObject<UnityEngine.Rendering.CommandBuffer>(L, 2);
			UnityEngine.Rendering.RenderTargetIdentifier arg1 = StackTraits<UnityEngine.Rendering.RenderTargetIdentifier>.Check(L, 3);
			obj.Blit(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExecuteOnRenderImageFeature(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Nova.PostProcessing obj = (Nova.PostProcessing)ToLua.CheckObject<Nova.PostProcessing>(L, 1);
			UnityEngine.Rendering.ScriptableRenderContext arg0 = StackTraits<UnityEngine.Rendering.ScriptableRenderContext>.Check(L, 2);
			UnityEngine.Rendering.Universal.RenderingData arg1 = StackTraits<UnityEngine.Rendering.Universal.RenderingData>.Check(L, 3);
			obj.ExecuteOnRenderImageFeature(arg0, ref arg1);
			ToLua.PushValue(L, arg1);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRestoreData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nova.PostProcessing obj = (Nova.PostProcessing)ToLua.CheckObject<Nova.PostProcessing>(L, 1);
			Nova.IRestoreData o = obj.GetRestoreData();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Restore(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Nova.PostProcessing obj = (Nova.PostProcessing)ToLua.CheckObject<Nova.PostProcessing>(L, 1);
			Nova.IRestoreData arg0 = (Nova.IRestoreData)ToLua.CheckObject<Nova.IRestoreData>(L, 2);
			obj.Restore(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_luaName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.PostProcessing obj = (Nova.PostProcessing)o;
			string ret = obj.luaName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index luaName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TempBlitID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Nova.PostProcessing.TempBlitID);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_restorableName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.PostProcessing obj = (Nova.PostProcessing)o;
			string ret = obj.restorableName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index restorableName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_luaName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.PostProcessing obj = (Nova.PostProcessing)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.luaName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index luaName on a nil value");
		}
	}
}

