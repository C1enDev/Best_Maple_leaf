// This source code was auto-generated by ToLua#, do not modify it
using System;
using LuaInterface;

public class Nova_DialogueEntryPreprocessorWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("DialogueEntryPreprocessor");
		L.RegFunction("ClearPatterns", ClearPatterns);
		L.RegFunction("AddPattern", AddPattern);
		L.RegFunction("AddPatternWithObject", AddPatternWithObject);
		L.RegFunction("AddPatternForTable", AddPatternForTable);
		L.RegFunction("AddPatternWithObjectForTable", AddPatternWithObjectForTable);
		L.RegFunction("AddPatternWithObjectAndResource", AddPatternWithObjectAndResource);
		L.RegFunction("AddCheckpointPattern", AddCheckpointPattern);
		L.RegFunction("AddCheckpointNextPattern", AddCheckpointNextPattern);
		L.RegFunction("GenerateActions", GenerateActions);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearPatterns(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Nova.DialogueEntryPreprocessor.ClearPatterns();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPattern(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			Nova.DialogueEntryPreprocessor.AddPattern(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPatternWithObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			Nova.DialogueEntryPreprocessor.AddPatternWithObject(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPatternForTable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			Nova.DialogueEntryPreprocessor.AddPatternForTable(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPatternWithObjectForTable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			Nova.DialogueEntryPreprocessor.AddPatternWithObjectForTable(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPatternWithObjectAndResource(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			Nova.DialogueEntryPreprocessor.AddPatternWithObjectAndResource(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddCheckpointPattern(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			Nova.DialogueEntryPreprocessor.AddCheckpointPattern(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddCheckpointNextPattern(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			Nova.DialogueEntryPreprocessor.AddCheckpointNextPattern(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GenerateActions(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			System.Collections.Generic.IReadOnlyDictionary<Nova.DialogueActionStage,System.Text.StringBuilder[]> arg0 = (System.Collections.Generic.IReadOnlyDictionary<Nova.DialogueActionStage,System.Text.StringBuilder[]>)ToLua.CheckObject<System.Collections.Generic.IReadOnlyDictionary<Nova.DialogueActionStage,System.Text.StringBuilder[]>>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			Nova.DialogueActionStage arg2 = (Nova.DialogueActionStage)ToLua.CheckObject(L, 3, typeof(Nova.DialogueActionStage));
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			Nova.DialogueEntryPreprocessor.GenerateActions(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

