// This source code was auto-generated by ToLua#, do not modify it
using System;
using LuaInterface;

public class Nova_SelectionListWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Nova.SelectionList), typeof(System.Object));
		L.RegFunction("Add", Add);
		L.RegFunction("New", _CreateNova_SelectionList);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("selections", get_selections, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNova_SelectionList(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Nova.SelectionList obj = new Nova.SelectionList();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Nova.SelectionList.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Add(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Nova.SelectionList obj = (Nova.SelectionList)ToLua.CheckObject<Nova.SelectionList>(L, 1);
			Nova.SelectionOccursData.Selection arg0 = (Nova.SelectionOccursData.Selection)ToLua.CheckObject<Nova.SelectionOccursData.Selection>(L, 2);
			obj.Add(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_selections(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.SelectionList obj = (Nova.SelectionList)o;
			System.Collections.Generic.IReadOnlyList<Nova.SelectionOccursData.Selection> ret = obj.selections;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index selections on a nil value");
		}
	}
}

