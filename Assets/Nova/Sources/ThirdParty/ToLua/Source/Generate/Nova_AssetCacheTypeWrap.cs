// This source code was auto-generated by ToLua#, do not modify it
using System;
using LuaInterface;

public class Nova_AssetCacheTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(Nova.AssetCacheType));
		L.RegVar("Image", get_Image, null);
		L.RegVar("Standing", get_Standing, null);
		L.RegVar("Prefab", get_Prefab, null);
		L.RegVar("Audio", get_Audio, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<Nova.AssetCacheType>.Check = CheckType;
		StackTraits<Nova.AssetCacheType>.Push = Push;
	}

	static void Push(IntPtr L, Nova.AssetCacheType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(Nova.AssetCacheType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Image(IntPtr L)
	{
		ToLua.Push(L, Nova.AssetCacheType.Image);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Standing(IntPtr L)
	{
		ToLua.Push(L, Nova.AssetCacheType.Standing);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Prefab(IntPtr L)
	{
		ToLua.Push(L, Nova.AssetCacheType.Prefab);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Audio(IntPtr L)
	{
		ToLua.Push(L, Nova.AssetCacheType.Audio);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		Nova.AssetCacheType o = (Nova.AssetCacheType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

